buildscript {
    ext {
        springBootVersion = '2.7.3'
        springBootManagementPlugin = '1.0.11.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:${springBootManagementPlugin}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.sonarqube"

group = 'org.container.terraman.api'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco.xml"
    }
}

repositories {
    mavenCentral()
}
ext {
    springIoPlatformVersion = 'Cairo-SR8'
    apacheHttpClientVersion = '4.5.12'
    gsonVersion = '2.8.6'
    lombokVersion = '1.18.12'
    jacocoVersion = '0.8.5'
    swaggerVersion = '2.9.2'
    jjwtVersion = '0.9.1'
    jsonpathVersion = '2.4.0'
    springCloudVersion = '2021.0.3'
//    jschVersion = '0.1.55'
    mariaDbVersion = '3.0.4'
}
jar {
    archivesBaseName = 'container-terraman-api'
    enabled = false
}
dependencies {
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'junit:junit:4.13.1'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compile "org.apache.httpcomponents:httpclient:${apacheHttpClientVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "io.jsonwebtoken:jjwt:${jjwtVersion}"
    compile("io.springfox:springfox-swagger2:${swaggerVersion}") {
        exclude module: 'swagger-annotations'
        exclude module: 'swagger-models'
    }
    compile("io.swagger:swagger-annotations:1.5.21")
    compile("io.swagger:swagger-models:1.5.21")
    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    compile "com.jayway.jsonpath:json-path:${jsonpathVersion}"
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.5'
    implementation 'org.springframework.retry:spring-retry'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.9'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.9'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.32'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.17.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
    compile( "org.springframework.cloud:spring-cloud-starter-vault-config")
//    implementation "com.jcraft:jsch:${jschVersion}"
    implementation 'commons-io:commons-io:2.11.0'
    testImplementation('org.mockito:mockito-inline:3.4.0')
    implementation files('libs/jsch-0.2.7.jar')
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/jacocoReport")
}
test {
    ignoreFailures = true
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco-overall.exec")
    }
    finalizedBy("jacocoTestReport")
}
jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("build/reports/jacoco.xml")
    }
}